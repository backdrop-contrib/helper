<?php

/**
 * Implememts hook_menu().
 */
function helper_menu() {
  $items['admin/config/system/helper'] = array(
    'title' => 'Helpers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('helper_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'helper.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_hook_info_alter().
 */
function helper_hook_info_alter(&$info) {
  module_load_include('inc', 'helper', 'helper.hook');
  $groups = _helper_hook_info_groups();
  foreach ($groups as $group => $hooks) {
    $info += array_fill_keys($hooks, array('group' => $group));
  }
}

/**
 * Implements hook_helper_tweak_info().
 */
function helper_helper_tweak_info() {
  $info['local_action_destination'] = array(
    'label' => t('Add destination query string to local actions.'),
  );
  $info['node_delete_tab'] = array(
    'label' => t('Expose Delete on nodes as a tab.'),
  );
  $info['login_destination'] = array(
    'label' => t('Add destination query strings to login/register links for anonymous users.'),
  );
  if (module_exists('comment')) {
    $info['node_comment_unpublished_count'] = array(
      'label' => t('Display unpublished comment count in node links.'),
    );
  }

  return $info;
}

function helper_is_tweak_enabled($tweak) {
  $tweaks = &drupal_static(__FUNCTION__);
  if (!isset($tweaks)) {
    $tweaks = variable_get('helper_tweaks', array());
  }
  return !isset($tweaks[$tweak]) || (bool) $tweaks[$tweak];
}

/**
 * Implements hook_menu_alter().
 */
function helper_menu_alter(&$items) {
  if (helper_is_tweak_enabled('node_delete_tab')) {
    // Make the delete page for nodes show up as a tab.
    $items['node/%node/delete']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add destination query string to local action links to take you back to
 * the page where you clicked the location action when done.
 */
function helper_preprocess_menu_local_action(&$variables) {
  if (helper_is_tweak_enabled('local_action_destination')) {
    $link = &$variables['element']['#link'];

    // Some local actions need to be whitelisted as having a redirect causes bugs.
    switch ($link['path']) {
      case 'admin/appearance/install':
      case 'admin/modules/install':
      case 'admin/reports/updates/install':
      case 'admin/structure/views/add':
        return;
    }

    $link += array('localized_options' => array());
    $link['localized_options'] += array('query' => array());
    $link['localized_options']['query'] += drupal_get_destination();
  }
}

/**
 * Implements hook_ajax_render_alter().
 */
function helper_ajax_render_alter() {
  // Disable XHProf module on any AJAX requests.
  // @todo Remove when http://drupal.org/node/1485190 is fixed.
  $GLOBALS['conf']['xhprof_enabled'] = FALSE;
}

/**
 * Implements hook_url_outbound_alter().
 *
 * Rewrite links to the login/register pages to include the current page so
 * the user is redirected back to their original page.
 */
function helper_url_outbound_alter(&$path, &$options, $original_path) {
  $paths = &drupal_static(__FUNCTION__);

  if (!isset($paths)) {
    $paths = array();
    if (!helper_is_tweak_enabled('login_destination')) {
      $paths = FALSE;
    }
    elseif (user_is_anonymous()) {
      // These only should get destinations if the user is anonymous.
      $paths = array('user', 'user/login', 'user/register', 'user/password');
    }
    $paths = !empty($paths) ? array_flip($paths) : FALSE;
    if (!empty($paths)) {
      $paths = array_flip($paths);
    }
  }

  if (!empty($paths) && isset($paths[$path]) && !isset($options['query']['destination'])) {
    // Only add destination if we already have a destination path, or the
    // current path does not match the paths we want to add this too.
    if (isset($_GET['destination']) || !isset($paths[$_GET['q']])) {
      $options['query'] += drupal_get_destination();
    }
  }
}

/**
 * Implements hook_registry_files_alter().
 */
function helper_registry_files_alter(&$files, $modules) {
  foreach ($modules as $module) {
    // If the selenium module is avaiable, but disabled, it causes fatal errors
    // when trying to access the Testing UI.
    if (!$module->status && $module->name == 'selenium') {
      $dir = $module->dir;
      $files[$dir . '/drupal_selenium_web_test_case.php'] = array(
        'module' => 'selenium',
        'weight' => 0,
      );
    }
  }
}
